###DEPENDENCIES: file_operations.pl

sub generate_firewall_configs {
    my ($dyn_fwrules_files_dir_l,$conf_firewalld_href_l)=@_;
    #$dyn_fwrules_files_dir_l=$dyn_fwrules_files_dir_g
    #$conf_firewalld_href_l = hash-ref for %h00_conf_firewalld_hash_g
    
    my $proc_name_l=(caller(0))[3];
    #$h00_conf_firewalld_hash_g{inventory_host}->
    #{'unconfigured_custom_firewall_zones_action'}=no_action|remove
    #{'temporary_apply_fwrules_timeout'}=NUM
    #{'if_no_ipsets_conf_action'}=remove|no_action
    #{'if_no_zones_conf_action'}=restore_defaults|no_action
    #{'if_no_policies_conf_action'}=remove|no_action
    #{'DefaultZone'}=name_of_default_zone
    #{'CleanupOnExit'}=yes|no
    #{'CleanupModulesOnExit'}=yes|no
    #{'Lockdown'}=yes|no
    #{'IPv6_rpfilter'}=yes|no
    #{'IndividualCalls'}=yes|no
    #{'LogDenied'}=all|unicast|broadcast|multicast|off
    #{'enable_logging_of_dropped_packets'}=yes|no
    #{'FirewallBackend'}=nftables|iptables
    #{'FlushAllOnReload'}=yes|no
    #{'RFC3964_IPv4'}=yes|no
    #{'AllowZoneDrifting'}=yes|no
    
    my $exec_res_l=undef;
    my ($hkey0_l,$hval0_l)=(undef,undef);
    my $arr_el0_l=undef;
    my $wr_str_l=undef;
    my $wr_file_l=undef;
    my @wr_arr_l=();
    my @tmp_arr_l=();
    my %wr_hash_l=();
        #key=inv-host, value=array of strings
    my @fw_config_seq_l=(
        'DefaultZone',
        'CleanupOnExit',
        'CleanupModulesOnExit',
        'Lockdown',
        'IPv6_rpfilter',
        'IndividualCalls',
        'LogDenied',
        'FirewallBackend',
        'FlushAllOnReload',
        'RFC3964_IPv4',
        'AllowZoneDrifting'
    );
    my @begin_conf_arr_l=(
        '###GENERATED BY ansible_helpers/conf_firewalld (https://github.com/vladimir-chursin000/ansible_helpers)',
        '###DO NOT CHANGE!',
        ' '
    );
    my $return_str_l='OK';
    
    # form arrays for create fw-configs
    while ( ($hkey0_l,$hval0_l)=each %{$conf_firewalld_href_l} ) {
        #$hkey0_l=inv-host
        
        # form firewalld.conf
        @{$wr_hash_l{$hkey0_l}{'fw_config'}}=@begin_conf_arr_l;
    	
        foreach $arr_el0_l ( @fw_config_seq_l ) {
            #$arr_el0_l=fw-param
            $wr_str_l="$arr_el0_l=${$hval0_l}{$arr_el0_l}";
            push(@{$wr_hash_l{$hkey0_l}{'fw_config'}},$wr_str_l);
    	    
            $wr_str_l=undef;
        }
    	
        $arr_el0_l=undef;
        ###
    	
        # logging_of_dropped_packets
        @{$wr_hash_l{$hkey0_l}{'firewalld-droppd'}}=@begin_conf_arr_l;
        push(@{$wr_hash_l{$hkey0_l}{'firewalld-droppd'}},'# NO CHANGES');
    	
        if ( ${$hval0_l}{'enable_logging_of_dropped_packets'} eq 'yes' && ${$hval0_l}{'LogDenied'} eq 'all' ) {
            #enable_logging_of_dropped_packets=yes|no
                # Need for set "LogDenied=all" (at "/atc/firewalld/firewalld.conf").
                # If "yes" -> all dropped/rejected packets will be written to file "/var/log/firewalld-droppd".
                # Log collecting released via rsyslog and createing conf file "/etc/rsyslog.d/firewalld-droppd.conf"
                    # with content:
                    # :msg,contains,"_DROP" /var/log/firewalld-droppd.log
                    # :msg,contains,"_REJECT" /var/log/firewalld-droppd.log
                    # & stop
            @{$wr_hash_l{$hkey0_l}{'firewalld-droppd'}}=();
            
            @{$wr_hash_l{$hkey0_l}{'firewalld-droppd'}}=@begin_conf_arr_l;
            push(@{$wr_hash_l{$hkey0_l}{'firewalld-droppd'}},':msg,contains,"_DROP" /var/log/firewalld-droppd.log');
            push(@{$wr_hash_l{$hkey0_l}{'firewalld-droppd'}},':msg,contains,"_REJECT" /var/log/firewalld-droppd.log');
            push(@{$wr_hash_l{$hkey0_l}{'firewalld-droppd'}},'& stop');
        }
        ###
    }
    ###
    
    # create fw-configs for each host
    while ( ($hkey0_l,$hval0_l)=each %wr_hash_l ) {
        #$hkey0_l=inv-host
    	if ( ! -d "$dyn_fwrules_files_dir_l/$hkey0_l" ) { system("mkdir -p $dyn_fwrules_files_dir_l/$hkey0_l"); }
        $wr_file_l=$dyn_fwrules_files_dir_l.'/'.$hkey0_l.'/firewalld.conf';
        if ( exists(${$hval0_l}{'fw_config'}) ) { @wr_arr_l=@{${$hval0_l}{'fw_config'}}; }
    	
        $exec_res_l=&rewrite_file_from_array_ref($wr_file_l,\@wr_arr_l);
        #$file_l,$aref_l
        if ( $exec_res_l=~/^fail/ ) { return "fail [$proc_name_l] -> ".$exec_res_l; }
    	
        $wr_file_l=undef;
        @wr_arr_l=();
    }
    
    ($hkey0_l,$hval0_l)=(undef,undef);
    ###
    
    # create 'firewalld-droppd' (for rsyslog) for each host
    while ( ($hkey0_l,$hval0_l)=each %wr_hash_l ) {
        #$hkey0_l=inv-host
    	if ( ! -d "$dyn_fwrules_files_dir_l/$hkey0_l" ) { system("mkdir -p $dyn_fwrules_files_dir_l/$hkey0_l"); }
        $wr_file_l=$dyn_fwrules_files_dir_l.'/'.$hkey0_l.'/rsyslog_firewalld-droppd.conf';
        if ( exists(${$hval0_l}{'firewalld-droppd'}) ) { @wr_arr_l=@{${$hval0_l}{'firewalld-droppd'}}; }
    	
    	###
        $exec_res_l=&rewrite_file_from_array_ref($wr_file_l,\@wr_arr_l);
        #$file_l,$aref_l
        if ( $exec_res_l=~/^fail/ ) { return "fail [$proc_name_l] -> ".$exec_res_l; }
    	###
    	
        $wr_file_l=undef;
        @wr_arr_l=();
    }
    
    ($hkey0_l,$hval0_l)=(undef,undef);
    ###
    
    return $return_str_l;
}

#With best regards
#Chursin Vladimir ( https://github.com/vladimir-chursin000 )
