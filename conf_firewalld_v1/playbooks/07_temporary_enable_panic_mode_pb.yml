---
- hosts: firewall_conf_dedic_app_v1
  vars:
     panic_timeout: "{{lookup('file','{{playbook_dir}}/tmp_vars/panic_timeout')}}"
  tasks:
######################################################STEP 1. Check for remote dirs/is_run_now-files is exists (begin)
# fill vars: apply_fwrules_is_run_at_remote_now_exists, rollback_fwrules_changes_is_run_at_remote_now_exists

    - name: "Check if exists 'apply_fwrules_is_run_now' at remote"
      stat:
        path: "~/ansible_helpers/conf_firewalld/apply_fwrules_is_run_now"
      register: apply_fwrules_is_run_at_remote_now_exists

######

    - name: "Check if exists 'rollback_fwrules_changes_is_run_now' at remote"
      stat:
        path: "~/ansible_helpers/conf_firewalld/rollback_fwrules_changes_is_run_now"
      register: rollback_fwrules_changes_is_run_at_remote_now_exists

######################################################STEP 1. Check for remote dirs/is_run_now-files is exists (end)

######################################################STEP 2. Copy 'temporary_panic_on.sh' to remote and run as process if need (begin)

    - name: "Copy 'temporary_panic_on.sh' to remote"
      ansible.builtin.copy:
        src: "{{playbook_dir}}/scripts_for_remote/temporary_panic_on.sh"
        dest: "~/ansible_helpers/conf_firewalld/temporary_panic_on.sh"
        mode: '0770'

    - name: "Run 'temporary_panic_on.sh' as process at remote"
      ansible.builtin.raw: "nohup sh -c '~/ansible_helpers/conf_firewalld/temporary_panic_on.sh {{panic_timeout}} >/dev/null 2>&1' & sleep 1"
      when: apply_fwrules_is_run_at_remote_now_exists.stat.exists==false and rollback_fwrules_changes_is_run_at_remote_now_exists.stat.exists==false

######################################################STEP 2. Copy 'temporary_panic_on.sh' to remote and run as process if need (end)
